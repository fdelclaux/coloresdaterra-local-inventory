package GUI;

import Database.Inventory;
import java.awt.Color;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author felipedelclaux
 */
public class ColoresDaTerra extends javax.swing.JFrame {
public static objects.Item itemSelect;
public static boolean doNotShow;
    /**
     * Creates new form ColoresDaTerra
     */
    public ColoresDaTerra() {
        initComponents();
        addPlatestoTable();
        String sort = (String) MainPageSort.getSelectedItem();
        order(sort);
        SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy");
        if(Database.Inventory.savedDate){
            LastSaved.setText(datef.format(Database.Inventory.lastSaved));
        }
        getContentPane().setBackground(Color.white);
    }
    public void order(String sort){
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DisplayTable.getModel());
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        int columnIndexToSort;
        switch(sort){
            case "Avg. Cost: Low-High":
                DisplayTable.setRowSorter(sorter);
                columnIndexToSort = 3;
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
                sorter.setSortKeys(sortKeys);
                sorter.sort();
                break;

            case "Avg. Cost: High-Low":
                DisplayTable.setRowSorter(sorter);
                columnIndexToSort = 3;
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
                sorter.setSortKeys(sortKeys);
                sorter.sort();
                break;

            case "Stock: Low-High":
                DisplayTable.setRowSorter(sorter);
                columnIndexToSort = 2;
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
                sorter.setSortKeys(sortKeys);
                sorter.sort();
                break;

            case "Stock: High-Low":
                DisplayTable.setRowSorter(sorter);
                columnIndexToSort = 2;
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING)); 
                sorter.setSortKeys(sortKeys);
                sorter.sort();
                break;

        }
    }
    
    
    private void addPlatestoTable(){
        DecimalFormat decimalf = new DecimalFormat("##.00");
        DefaultTableModel model = (DefaultTableModel) DisplayTable.getModel();
        Object rowData[] = new Object[5];
        for(int i = 0;i<Database.Inventory.inventory.size();i++){
            rowData[0] = Database.Inventory.inventory.get(i).reference;
            rowData[1] = Database.Inventory.inventory.get(i).description;
            rowData[2] = Database.Inventory.inventory.get(i).totalStock();
            if(Database.Inventory.inventory.get(i).totalStock() == 0 ){
                rowData[3] = 0.0;
            }
            else{
                rowData[3] = Double.parseDouble(decimalf.format(Database.Inventory.inventory.get(i).avgCost()));
            }
            rowData[4] = Database.Inventory.inventory.get(i).getTotalCost();
            model.addRow(rowData);
        }
    }
    
    private void SearchFilter(String search){
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DisplayTable.getModel()); DisplayTable.setRowSorter(sorter);
        RowFilter rowf = RowFilter.regexFilter("(?i)"+search);
        sorter.setRowFilter(rowf);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPageSort = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayTable = new javax.swing.JTable();
        View = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Sell = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        LastSaved = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainPageSort.setEditable(true);
        MainPageSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Avg. Cost: Low-High", "Avg. Cost: High-Low", "Stock: Low-High", "Stock: High-Low" }));
        MainPageSort.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MainPageSortItemStateChanged(evt);
            }
        });

        DisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reference", "Description", "Total in Stock", "Avg. Cost(â‚¬)", "Total Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(DisplayTable);

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Sell.setText("Sell");
        Sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellActionPerformed(evt);
            }
        });

        jLabel1.setText("Last Saved:");

        Search.setText("Search...");
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });
        Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchKeyReleased(evt);
            }
        });

        jMenu1.setText("File");

        jMenu4.setText("Save");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu4);

        jMenu5.setText("Quit");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Sales");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Print");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(MainPageSort, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(LastSaved, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(View)
                            .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Sell, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Add, Sell, View});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainPageSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1))
                    .addComponent(LastSaved, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(View)
                        .addGap(6, 6, 6)
                        .addComponent(Add)
                        .addGap(6, 6, 6)
                        .addComponent(Sell))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Add, Sell, View});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        if(DisplayTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this,
            "Please select a row before clicking view", "Error",
            JOptionPane.ERROR_MESSAGE);
        } 
        else{
            int r = DisplayTable.getSelectedRow();
            String ref = DisplayTable.getValueAt(r,0).toString(); 
            int reference = Integer.parseInt(ref);
            int index = Database.Inventory.findIndex(reference); 
            itemSelect = Database.Inventory.inventory.get(index); 
            new ViewInfoInventory(itemSelect).setVisible(true); 
            this.dispose();     
        }// TODO add your handling code here:
    }//GEN-LAST:event_ViewActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        if(DisplayTable.getSelectedRow() == -1){
            if(doNotShow){
                new NewItem().setVisible(true);
            }
            else{
                new AddPage().setVisible(true); }
            } 
        else{
            int r = DisplayTable.getSelectedRow();
            String ref = DisplayTable.getValueAt(r,0).toString(); 
            int reference = Integer.parseInt(ref);
            int index = Database.Inventory.findIndex(reference); 
            itemSelect = Database.Inventory.inventory.get(index); 
            new IncreaseStock(itemSelect).setVisible(true);
        }
        this.dispose();
    }//GEN-LAST:event_AddActionPerformed

    private void SellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellActionPerformed
        if(DisplayTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this,
            "Please select a row before clicking Sell", "Error",
            JOptionPane.ERROR_MESSAGE);
        }
        else{
            int r = DisplayTable.getSelectedRow();
            String ref = DisplayTable.getValueAt(r,0).toString(); 
            int reference = Integer.parseInt(ref);
            int index = Database.Inventory.findIndex(reference); 
            itemSelect = Database.Inventory.inventory.get(index); 
            this.dispose();
            new Sell(itemSelect).setVisible(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_SellActionPerformed

    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
        Search.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_SearchMouseClicked

    private void MainPageSortItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MainPageSortItemStateChanged
        String sort = (String) MainPageSort.getSelectedItem(); 
        order(sort);        // TODO add your handling code here:
    }//GEN-LAST:event_MainPageSortItemStateChanged

    private void SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchKeyReleased
        String search = Search.getText();
        if(search.equals("")){
            order(MainPageSort.getSelectedItem().toString()); 
        }
        else{ 
            SearchFilter(search);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_SearchKeyReleased

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        Database.Inventory.lastSaved = new Date();
        boolean savedInv;
        boolean savedSal;
        savedInv = Database.Inventory.fileWriter(); 
        savedSal = Database.Sales.fileWriter(); 
        if(savedInv && savedSal){
            JOptionPane.showMessageDialog(this,
                "You have succesfully saved your changes!");
        }
        else if(!savedInv){
            JOptionPane.showMessageDialog(this,
                "Something has gone wrong when saving your changes made to the inventory, please try again",
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
        else if(!savedSal){
            JOptionPane.showMessageDialog(this,
                "Something has gone wrong when saving your sales, please try again",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        new SaveCheck().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        this.dispose();
        new ColoresDaTerraSales().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        new PrintInventory().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColoresDaTerra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColoresDaTerra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColoresDaTerra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColoresDaTerra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try{
            String laf = UIManager.getSystemLookAndFeelClassName(); 
            UIManager.setLookAndFeel(laf); 
            Database.Inventory.fileReader(); 
            Database.Sales.fileReader();
            
            if(StockAlert.lowStock()){
                new StockAlert().setVisible(true);
            }
        }
        catch (InstantiationException ex) { Logger.getLogger(ColoresDaTerra.class.getName()).log(Level.SEVERE, null, ex);}
        catch (IllegalAccessException ex) { Logger.getLogger(ColoresDaTerra.class.getName()).log(Level.SEVERE, null, ex);}
        catch (UnsupportedLookAndFeelException ex) { Logger.getLogger(ColoresDaTerra.class.getName()).log(Level.SEVERE, null, ex);}

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColoresDaTerra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JTable DisplayTable;
    private javax.swing.JLabel LastSaved;
    private javax.swing.JComboBox<String> MainPageSort;
    private javax.swing.JTextField Search;
    private javax.swing.JButton Sell;
    private javax.swing.JButton View;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
